diff --git a/torch/distributed/distributed_c10d.py b/torch/distributed/distributed_c10d.py
index be0006d..4b70c9c 100644
--- a/torch/distributed/distributed_c10d.py
+++ b/torch/distributed/distributed_c10d.py
@@ -63,6 +63,7 @@ _MPI_AVAILABLE = True
 _NCCL_AVAILABLE = True
 _GLOO_AVAILABLE = True
 _UCC_AVAILABLE = True
+_MCCL_AVAILABLE = True
 
 _pickler = pickle.Pickler
 _unpickler = pickle.Unpickler
@@ -241,6 +242,7 @@ class BackendConfig:
             self.device_backend_map = {
                 "cpu": backend_val,
                 "cuda": backend_val,
+                "musa": backend_val,
             }
         else:
             # custom backend string in format of "{device_type1}:{backend1},{device_type2}:{backend2}"
@@ -418,6 +420,8 @@ def _get_pg_device(group: ProcessGroup):
     """
     if _check_for_nccl_backend(group):
         return torch.device("cuda", torch.cuda.current_device())
+    if _check_for_mccl_backend(group):
+        return torch.device("musa", torch.musa.current_device())
     return torch.device("cpu")
 
 
@@ -655,6 +659,11 @@ def is_nccl_available() -> bool:
     """
     return _NCCL_AVAILABLE
 
+def is_mccl_available() -> bool:
+    """
+    Checks if the MCCL backend is available.
+    """
+    return _MCCL_AVAILABLE
 
 def is_gloo_available() -> bool:
     """
@@ -1969,6 +1978,14 @@ def _check_for_nccl_backend(group):
         pg.name() == Backend.NCCL
     )
 
+def _check_for_mccl_backend(group):
+    pg = group or _get_default_group()
+    # A BUG of torch here:
+    # Torch register custom MCCL as Backend.MCCL == "MCCL"
+    # But Backend.NCCL == 'nccl', thus we have to compare
+    # the backend by uppper (or lower).
+    return (is_mccl_available() and
+            pg.name().upper() == Backend.MCCL.upper())
 
 @exception_handler
 def all_gather_object(object_list, obj, group=None):
@@ -3296,11 +3313,11 @@ def barrier(group=GroupMember.WORLD, async_op=False, device_ids=None):
 
     opts = BarrierOptions()
     if device_ids is not None:
-        if get_backend(group) != Backend.NCCL:
-            raise RuntimeError(
-                "Function argument device_ids not supported "
-                "for the selected backend {}".format(get_backend(group))
-            )
+#        if get_backend(group) != Backend.NCCL:
+#            raise RuntimeError(
+#                "Function argument device_ids not supported "
+#                "for the selected backend {}".format(get_backend(group))
+#            )
         if isinstance(device_ids, list):
             opts.device_ids = device_ids
         else:
