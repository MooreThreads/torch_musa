From d9f331b3747c4ff0b03cd61cdc9a82cfe484ebef Mon Sep 17 00:00:00 2001
From: "kang.chen" <kang.chen@mthreads.com>
Date: Mon, 24 Apr 2023 06:23:54 +0000
Subject: [PATCH] support storage and new in musa DispatchKey

Signed-off-by: kang.chen <kang.chen@mthreads.com>
---
 torch/csrc/DynamicTypes.cpp     | 2 ++
 torch/csrc/Storage.cpp          | 2 ++
 torch/csrc/utils/tensor_new.cpp | 1 +
 3 files changed, 5 insertions(+)

diff --git a/torch/csrc/DynamicTypes.cpp b/torch/csrc/DynamicTypes.cpp
index e818016..357918f 100644
--- a/torch/csrc/DynamicTypes.cpp
+++ b/torch/csrc/DynamicTypes.cpp
@@ -45,6 +45,8 @@ at::DeprecatedTypeProperties* get_type_properties(
     backend = at::Backend::MPS;
   } else if (device_type == at::DeviceType::Meta) {
     backend = at::Backend::Undefined;
+  } else if (device_type == at::DeviceType::PrivateUse1) {
+    backend = at::Backend::PrivateUse1;
   } else {
     TORCH_CHECK(false, "Invalid device for storage: ", device_type);
   }
diff --git a/torch/csrc/Storage.cpp b/torch/csrc/Storage.cpp
index e998198..22f0489 100644
--- a/torch/csrc/Storage.cpp
+++ b/torch/csrc/Storage.cpp
@@ -112,6 +112,8 @@ static PyObject* THPStorage_pynew(
       allocator = c10::GetAllocator(device.type());
     } else if (device.type() == at::DeviceType::Meta) {
       allocator = c10::GetAllocator(device.type());
+    } else if (device.type() == at::DeviceType::PrivateUse1) {
+      allocator = c10::GetAllocator(device.type());
     } else {
       TORCH_CHECK(
           false,
diff --git a/torch/csrc/utils/tensor_new.cpp b/torch/csrc/utils/tensor_new.cpp
index b193bb7..18f1fb5 100644
--- a/torch/csrc/utils/tensor_new.cpp
+++ b/torch/csrc/utils/tensor_new.cpp
@@ -487,6 +487,7 @@ void check_base_legacy_new(
         c10::DispatchKey::HPU,
         c10::DispatchKey::MPS,
         c10::DispatchKey::Meta,
+        c10::DispatchKey::PrivateUse1,
     });
     TORCH_CHECK(
         expected_key_set.has(dispatch_key),
-- 
2.30.2

