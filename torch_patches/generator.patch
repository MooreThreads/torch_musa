diff --git a/aten/src/ATen/core/GeneratorForPrivateuseone.cpp b/aten/src/ATen/core/GeneratorForPrivateuseone.cpp
new file mode 100644
index 00000000000..734ea90de02
--- /dev/null
+++ b/aten/src/ATen/core/GeneratorForPrivateuseone.cpp
@@ -0,0 +1,28 @@
+#include <mutex>
+#include <ATen/core/GeneratorForPrivateuseone.h>
+
+namespace at {
+
+c10::optional<GeneratorFuncType>& GetGeneratorPrivate() {
+  static c10::optional<GeneratorFuncType> generator_privateuse1 = c10::nullopt;
+  return generator_privateuse1;
+}
+
+std::mutex _generator_mutex_lock;
+_GeneratorRegister::_GeneratorRegister(GeneratorFuncType func) {
+  _generator_mutex_lock.lock();
+  TORCH_CHECK(!GetGeneratorPrivate().has_value(),
+    "Only can register a generator to the PrivateUse1 dispatch key once!");
+  auto& m_generator = GetGeneratorPrivate();
+  m_generator = func;
+  _generator_mutex_lock.unlock();
+}
+
+at::Generator GetGeneratorForPrivateuse1(c10::DeviceIndex device_index) {
+  TORCH_CHECK(GetGeneratorPrivate().has_value(),
+    "Please register a generator to the PrivateUse1 dispatch key, \
+     using the REGISTER_GENERATOR_PRIVATEUSE1 macro.");
+  return GetGeneratorPrivate().value()(device_index);
+}
+
+}
diff --git a/aten/src/ATen/core/GeneratorForPrivateuseone.h b/aten/src/ATen/core/GeneratorForPrivateuseone.h
new file mode 100644
index 00000000000..eb74484081c
--- /dev/null
+++ b/aten/src/ATen/core/GeneratorForPrivateuseone.h
@@ -0,0 +1,36 @@
+#pragma once
+
+#include <ATen/core/Generator.h>
+#include <c10/util/intrusive_ptr.h>
+
+namespace at {
+
+using GeneratorFuncType = std::function<at::Generator(c10::DeviceIndex)>;
+
+c10::optional<GeneratorFuncType>& GetGeneratorPrivate();
+
+class TORCH_API _GeneratorRegister{
+public:
+  _GeneratorRegister(GeneratorFuncType func);
+};
+
+TORCH_API at::Generator GetGeneratorForPrivateuse1(c10::DeviceIndex device_index);
+
+/**
+ * This is used to register Generator to PyTorch for `privateuse1` key.
+ * Usage: REGISTER_GENERATOR_PRIVATEUSE1(GeneratorForPrivateuse1)
+ * GeneratorForPrivateuse1 func must return a argument with type of at::Generator.
+ * class CustomGeneratorImpl : public c10::GeneratorImpl {
+ * CustomGeneratorImpl(DeviceIndex device_index = -1);
+ * ~CustomGeneratorImpl() override = default;
+ * ...
+ * }
+ * at::Generator MakeGeneratorForPrivateuse1(c10::DeviceIndex id) {
+ * return at::make_generator<CustomGeneratorImpl>(id);
+ * }
+ * REGISTER_GENERATOR_PRIVATEUSE1(MakeGeneratorForPrivateuse1)
+ */
+#define REGISTER_GENERATOR_PRIVATEUSE1(GeneratorPrivate)                                  \
+  auto temp##GeneratorPrivate = at::_GeneratorRegister(GeneratorPrivate);
+
+}
diff --git a/torch/csrc/Generator.cpp b/torch/csrc/Generator.cpp
index 44a0d0242b9..3e3b2819fc5 100644
--- a/torch/csrc/Generator.cpp
+++ b/torch/csrc/Generator.cpp
@@ -4,6 +4,7 @@
 #include <ATen/CPUGeneratorImpl.h>
 #include <structmember.h>
 
+#include <ATen/core/GeneratorForPrivateuseone.h>
 #include <torch/csrc/Device.h>
 #include <torch/csrc/Exceptions.h>
 #include <torch/csrc/THP.h>
@@ -68,7 +69,9 @@ static PyObject* THPGenerator_pynew(
     self->cdata = make_generator<MPSGeneratorImpl>();
   }
 #endif
-  else {
+  else if (device.type() == at::kPrivateUse1) {
+    self->cdata = at::GetGeneratorForPrivateuse1(device.index());
+  } else {
     AT_ERROR(
         "Device type ",
         c10::DeviceTypeName(device.type()),
