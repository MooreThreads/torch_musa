diff --git a/torch/csrc/utils/tensor_types.cpp b/torch/csrc/utils/tensor_types.cpp
index 7dacce7..95ecf9d 100644
--- a/torch/csrc/utils/tensor_types.cpp
+++ b/torch/csrc/utils/tensor_types.cpp
@@ -18,8 +18,17 @@ using namespace at;
 
 namespace torch::utils {
 
+static std::string privateuseone_backend_to_string(std::string str) {
+  static const std::string original_name = "torch_" + get_privateuse1_backend();
+  if (std::mismatch(original_name.begin(), original_name.end(), str.begin())
+          .first == original_name.end()) {
+    str[5] = '.';
+  }
+  return str;
+}
+
 static const char* parse_privateuseone_backend(bool is_sparse = false) {
-  static std::string backend_name = "torch." + get_privateuse1_backend();
+  static std::string backend_name = "torch_" + get_privateuse1_backend();
   static std::string sparse_backend_name = backend_name + ".sparse";
   return is_sparse == false ? backend_name.c_str()
                             : sparse_backend_name.c_str();
@@ -66,23 +75,24 @@ const char* backend_to_string(const at::Backend& backend) {
 
 std::string options_to_string(const at::TensorOptions& options) {
   std::ostringstream ss;
-  ss << backend_to_string(options.backend()) << "."
-     << toString(at::typeMetaToScalarType(options.dtype())) << "Tensor";
+  ss << privateuseone_backend_to_string(backend_to_string(options.backend()))
+     << "." << toString(at::typeMetaToScalarType(options.dtype())) << "Tensor";
   return ss.str();
 }
 
 std::string type_to_string(const at::DeprecatedTypeProperties& type) {
   std::ostringstream ss;
-  ss << backend_to_string(type.backend()) << "." << toString(type.scalarType())
-     << "Tensor";
+  ss << privateuseone_backend_to_string(backend_to_string(type.backend()))
+     << "." << toString(type.scalarType()) << "Tensor";
   return ss.str();
 }
 
-at::TensorOptions options_from_string(const std::string& str) {
+at::TensorOptions options_from_string(const std::string& str_) {
+  const auto str = privateuseone_backend_to_string(str_);
   static std::string cuda_prefix("torch.cuda.");
   static std::string xpu_prefix("torch.xpu.");
   static std::string privateUser_prefix(
-      std::string(parse_privateuseone_backend()) + ".");
+      privateuseone_backend_to_string(parse_privateuseone_backend()) + ".");
   static c10::once_flag cpu_once;
   static c10::once_flag cuda_once;
   static c10::once_flag xpu_once;
