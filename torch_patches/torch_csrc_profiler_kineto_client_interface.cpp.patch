diff --git a/torch/csrc/profiler/kineto_client_interface.cpp b/torch/csrc/profiler/kineto_client_interface.cpp
index 7fd1e4d..10af048 100644
--- a/torch/csrc/profiler/kineto_client_interface.cpp
+++ b/torch/csrc/profiler/kineto_client_interface.cpp
@@ -21,8 +21,21 @@ class LibKinetoClient : public libkineto::ClientInterface {
  public:
   void init() override {}
 
+  int getEnv(const char* env_var_name) {
+    const char* c = std::getenv(env_var_name);
+    if (!c) {
+      return -1;
+    }
+    std::string s{c};
+    try {
+      return std::stoi(s);
+    } catch (const std::invalid_argument& _) {
+      return -1;
+    }
+  }
+
   void prepare(
-      bool report_input_shapes = false,
+      bool report_input_shapes = true,
       bool profile_memory = false,
       bool with_stack = false,
       bool with_flops = false,
@@ -44,9 +57,15 @@ class LibKinetoClient : public libkineto::ClientInterface {
         /*with_modules=*/withModules_};
     std::set<ActivityType> activities{ActivityType::CPU};
     std::unordered_set<at::RecordScope> scopes;
-    scopes.insert(at::RecordScope::FUNCTION);
-    scopes.insert(at::RecordScope::USER_SCOPE);
-    scopes.insert(at::RecordScope::BACKWARD_FUNCTION);
+    if (getEnv("PROFILING_DISABLE_FUNCTION") <= 0) {
+      scopes.insert(at::RecordScope::FUNCTION);
+    }
+    if (getEnv("PROFILING_DISABLE_USER_SCOPE") <= 0) {
+      scopes.insert(at::RecordScope::USER_SCOPE);
+    }
+    if (getEnv("PROFILING_DISABLE_BACKWARD_FUNCTION") <= 0) {
+      scopes.insert(at::RecordScope::BACKWARD_FUNCTION);
+    }
     enableProfiler(cfg, activities, scopes);
   }
 
