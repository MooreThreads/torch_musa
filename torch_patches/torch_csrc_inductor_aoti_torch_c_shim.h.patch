diff --git a/torch/csrc/inductor/aoti_torch/c/shim.h b/torch/csrc/inductor/aoti_torch/c/shim.h
index 49b1650..95a4b35 100644
--- a/torch/csrc/inductor/aoti_torch/c/shim.h
+++ b/torch/csrc/inductor/aoti_torch/c/shim.h
@@ -93,7 +93,7 @@ using AOTITorchError = int32_t;
 // these, so we probably could later switch to having these in the ABI, if
 // desired for perf reasons.)
 AOTI_TORCH_EXPORT int32_t aoti_torch_device_type_cpu();
-AOTI_TORCH_EXPORT int32_t aoti_torch_device_type_cuda();
+AOTI_TORCH_EXPORT int32_t aoti_torch_device_type_musa();
 
 AOTI_TORCH_EXPORT int32_t aoti_torch_dtype_float8_e5m2();
 AOTI_TORCH_EXPORT int32_t aoti_torch_dtype_float8_e4m3fn();
@@ -581,38 +581,34 @@ AOTI_TORCH_EXPORT void aoti_torch_save_tensor_handle(
     const char* launch_prefix,
     const char* kernel_name);
 
-#ifdef USE_CUDA
+struct MUSAGuardOpaque;
+using MUSAGuardHandle = MUSAGuardOpaque*;
 
-struct CUDAGuardOpaque;
-using CUDAGuardHandle = CUDAGuardOpaque*;
-
-AOTI_TORCH_EXPORT AOTITorchError aoti_torch_create_cuda_guard(
+AOTI_TORCH_EXPORT AOTITorchError aoti_torch_create_musa_guard(
     int32_t device_index,
-    CUDAGuardHandle* ret_guard // returns new reference
+    MUSAGuardHandle* ret_guard // returns new reference
 );
 
 AOTI_TORCH_EXPORT AOTITorchError
-aoti_torch_delete_cuda_guard(CUDAGuardHandle guard);
+aoti_torch_delete_musa_guard(MUSAGuardHandle guard);
 
 AOTI_TORCH_EXPORT AOTITorchError
-aoti_torch_cuda_guard_set_index(CUDAGuardHandle guard, int32_t device_index);
+aoti_torch_musa_guard_set_index(MUSAGuardHandle guard, int32_t device_index);
 
-struct CUDAStreamGuardOpaque;
-using CUDAStreamGuardHandle = CUDAStreamGuardOpaque*;
+struct MUSAStreamGuardOpaque;
+using MUSAStreamGuardHandle = MUSAStreamGuardOpaque*;
 
-AOTI_TORCH_EXPORT AOTITorchError aoti_torch_create_cuda_stream_guard(
+AOTI_TORCH_EXPORT AOTITorchError aoti_torch_create_musa_stream_guard(
     void* stream,
     int32_t device_index,
-    CUDAStreamGuardHandle* ret_guard // returns new reference
+    MUSAStreamGuardHandle* ret_guard // returns new reference
 );
 
 AOTI_TORCH_EXPORT AOTITorchError
-aoti_torch_delete_cuda_stream_guard(CUDAStreamGuardHandle guard);
+aoti_torch_delete_musa_stream_guard(MUSAStreamGuardHandle guard);
 
 AOTI_TORCH_EXPORT AOTITorchError
-aoti_torch_get_current_cuda_stream(int32_t device_index, void** ret_stream);
-
-#endif
+aoti_torch_get_current_musa_stream(int32_t device_index, void** ret_stream);
 
 // See `ProxyExecutor Design Note` in ir.py for more details
 AOTI_TORCH_EXPORT AOTITorchError aoti_torch_proxy_executor_call_function(
