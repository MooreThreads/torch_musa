diff --git a/torch/csrc/profiler/collection.cpp b/torch/csrc/profiler/collection.cpp
index 4ebfe0a..bea76e0 100644
--- a/torch/csrc/profiler/collection.cpp
+++ b/torch/csrc/profiler/collection.cpp
@@ -349,8 +349,10 @@ std::unique_ptr<KinetoObserverContext> ThreadLocalSubqueue::begin_op(
   if (config_.state == ProfilerState::KINETO_GPU_FALLBACK) {
     try {
       out->fallback_ = torch_ops_.device_fallback_.emplace_back();
-      torch::profiler::impl::cudaStubs()->record(
-          nullptr, &out->fallback_->device_event_start_, nullptr);
+      // musaStubs does not exist temporarily hence comment the following lines
+      // which won't affect the functionality of torch musa profiler
+      // torch::profiler::impl::cudaStubs()->record(
+          // nullptr, &out->fallback_->cuda_event_start_, nullptr);
     } catch (const std::exception& e) {
       LOG(WARNING) << "Failed to record CUDA event. " << e.what();
     }
@@ -1045,7 +1047,8 @@ class TransferEvents {
                     "ROCTracer produced duplicate flow start: ", i.flow.id);
               }
 #else // USE_ROCM
-              TORCH_INTERNAL_ASSERT(inserted.second);
+              // The following line must be commented otherwise it will generate compiling error
+              // TORCH_INTERNAL_ASSERT(inserted.second);
 #endif // USE_ROCM
             }
             TORCH_INTERNAL_ASSERT(e->parent_.expired());
@@ -1430,15 +1433,19 @@ RecordQueue::getRecords(
 
   auto trace = addKinetoEvents(out, start_time_us, end_time_us, config_);
 
-  std::stable_sort(out.begin(), out.end(), [](const auto& a, const auto& b) {
-    return a->start_time_ns_ < b->start_time_ns_;
-  });
+  if (std::getenv("PROFILING_DISABLE_SORT") == nullptr) {
+    std::stable_sort(out.begin(), out.end(), [](const auto& a, const auto& b) {
+        return a->start_time_ns_ < b->start_time_ns_;
+    });
+  }
 
   if (config_.report_input_shapes && config_.profile_memory) {
     calculateUniqueTensorIDs(out);
   }
 
-  build_tree(out);
+  if (std::getenv("PROFILING_DISABLE_BUILD_TREE") == nullptr) {
+    build_tree(out);
+  }
   return {out, std::move(trace)};
 }
 
